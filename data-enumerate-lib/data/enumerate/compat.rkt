#lang racket/base

(require (prefix-in : "lib.rkt")
         (prefix-in : "../enumerate.rkt")
         (prefix-in unsafe: "unsafe.rkt")
         racket/contract)

(provide (all-defined-out))

(define (map/e f1 f2 . es)
  (apply unsafe:map/e f1 f2 #:contract any/c es))

(define enum? :enum?)
(define size :enum-size)
(define from-nat :from-nat)
(define to-nat :to-nat)
(define (filter/e . args) (error 'filter/e "this one is gone; don't use it"))
(define except/e :except/e)
(define to-stream :to-stream)
(define approximate :approximate)
(define to-list :to-list)
(define take/e :take/e)
(define slice/e :slice/e)
(define below/e :below/e)
(define empty/e :empty/e)
(define const/e :fin/e)
(define (from-list/e l) (apply fin/e l))
(define fin/e :fin/e)
(define nat/e :nat/e)
(define int/e :int/e)
(define disj-sum/e :sum/e)
(define disj-append/e :disj-append/e)
(define fin-cons/e :cons/e)
(define cons/e :cons/e)
(define (elegant-cons/e a b) (cons/e a b))
(define traverse/e :traverse/e)
(define hash-traverse/e :hash-traverse/e)
(define dep/e :dep/e)
(define (dep2/e n a b) (:dep/e a b))
(define fold-enum :fold-enum)
(define flip-dep/e :flip-dep/e)
(define range/e :range/e)
(define thunk/e :thunk/e)
(define fix/e :fix/e)
(define many/e :many/e)
(define many1/e :many1/e)
(define (cantor-vec/e . args) (apply :vector/e #:ordering 'diagonal args))
(define vec/e :vector/e)
(define box-vec/e :vector/e)
(define inf-fin-fair-list/e :list/e)
;; (define mixed-box-tuples/e :mixed-box-tuples/e) this one was strange and not what the docs said
(define inf-fin-cons/e :cons/e)
(define list/e :list/e)
(define nested-cons-list/e :list/e)
(define (cantor-list/e . args) (apply :list/e #:ordering 'diagonal args))
(define box-list/e :list/e)
(define prime-length-box-list/e :list/e)
(define box-tuples/e unsafe:box-tuples/e)
(define bounded-list/e :bounded-list/e)
(define nat+/e :nat+/e)
(define fail/e :fail/e)
(define char/e :char/e)
(define string/e :string/e)
(define from-1/e :from-1/e)
(define integer/e :integer/e)
(define float/e :float/e)
(define real/e :real/e)
;; (define non-real/e :non-real/e) ;; hopefully not used
(define num/e :num/e)
(define bool/e :bool/e)
(define symbol/e :symbol/e)
(define base/e :base/e)
(define any/e :any/e)
